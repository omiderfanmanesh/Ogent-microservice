#!/usr/bin/env python
"""
Database setup script for Ogent.

This script initializes the database and creates an admin user.
"""

import asyncio
import os
import sys
from datetime import datetime
from pathlib import Path

# Add the parent directory to sys.path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from sqlalchemy import create_engine, text
from sqlalchemy.ext.asyncio import create_async_engine
from dotenv import load_dotenv

from app.core.entities.user import User
from app.infrastructure.persistence.models import Base
from app.infrastructure.persistence.database import get_session
from app.api.auth import get_password_hash
from app.api.dependencies import get_user_repository

# Load environment variables
load_dotenv()

# Database URL from environment
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://postgres:postgres@localhost:5432/ogent")
SYNC_DATABASE_URL = DATABASE_URL.replace("+asyncpg", "")

# Default admin credentials from environment
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "admin")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "admin123")
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL", "admin@example.com")

async def create_database():
    """
    Create the database if it doesn't exist.
    """
    # Extract database name from connection string
    db_name = DATABASE_URL.split("/")[-1]
    
    # Create a connection string without the database name
    server_url = DATABASE_URL.rsplit("/", 1)[0] + "/postgres"
    server_url_sync = SYNC_DATABASE_URL.rsplit("/", 1)[0] + "/postgres"
    
    print(f"Checking if database '{db_name}' exists...")
    
    # Connect to the server
    engine = create_engine(server_url_sync)
    
    # Check if the database exists
    with engine.connect() as conn:
        result = conn.execute(text(f"SELECT 1 FROM pg_database WHERE datname = '{db_name}'"))
        exists = result.scalar() == 1
    
    if not exists:
        print(f"Creating database '{db_name}'...")
        with engine.connect() as conn:
            # Disconnect all clients
            conn.execute(text(f"SELECT pg_terminate_backend(pg_stat_activity.pid) "
                              f"FROM pg_stat_activity "
                              f"WHERE pg_stat_activity.datname = '{db_name}' "
                              f"AND pid <> pg_backend_pid()"))
            # Create database
            conn.execute(text(f"CREATE DATABASE {db_name}"))
        print(f"Database '{db_name}' created successfully.")
    else:
        print(f"Database '{db_name}' already exists.")

async def create_tables():
    """
    Create all tables using SQLAlchemy models.
    """
    print("Creating tables...")
    
    # Create async engine
    engine = create_async_engine(DATABASE_URL)
    
    # Create all tables
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    print("Tables created successfully.")

async def create_admin_user():
    """
    Create an admin user if it doesn't exist.
    """
    print(f"Checking if admin user '{ADMIN_USERNAME}' exists...")
    
    # Get async session
    async for session in get_session():
        # Get user repository
        user_repo = await get_user_repository(session)
        
        # Check if user exists
        existing_user = await user_repo.get_by_username(ADMIN_USERNAME)
        
        if not existing_user:
            print(f"Creating admin user '{ADMIN_USERNAME}'...")
            
            # Create user entity
            admin_user = User(
                id=None,  # Will be generated by the repository
                username=ADMIN_USERNAME,
                email=ADMIN_EMAIL,
                hashed_password=get_password_hash(ADMIN_PASSWORD),
                is_active=True,
                is_admin=True,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            # Save user to database
            await user_repo.create(admin_user)
            print(f"Admin user '{ADMIN_USERNAME}' created successfully.")
        else:
            print(f"Admin user '{ADMIN_USERNAME}' already exists.")
        
        break  # Only need one session

async def setup_database():
    """
    Run all database setup steps.
    """
    print("Starting database setup...")
    
    try:
        # Create database
        await create_database()
        
        # Create tables
        await create_tables()
        
        # Create admin user
        await create_admin_user()
        
        print("Database setup completed successfully.")
    except Exception as e:
        print(f"Error during database setup: {e}")
        raise

if __name__ == "__main__":
    # Run the setup
    asyncio.run(setup_database()) 